// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique
  name     String
  imageUrl String
  email    String

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Server {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  inviteCode String @unique

  members  Member[]
  channels Channel[]

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("servers")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?  @db.ObjectId
  server    Server?  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId  String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("members")
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  messages Message[]

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?  @db.ObjectId
  server    Server?  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId  String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
  @@map("channels")
}

model Message {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  deleted Boolean @default(false)

  member    Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String?  @db.ObjectId
  Channel   Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
  @@map("messages")
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  directMessages DirectMessage[]

  memberOne   Member? @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberOneId String? @db.ObjectId
  memberTwo   Member? @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  memberTwoId String? @db.ObjectId

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
  @@map("conversations")
}

model DirectMessage {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String
  deleted Boolean @default(false)

  member         Member?       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId       String?       @db.ObjectId
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?       @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
  @@map("directMessages")
}
